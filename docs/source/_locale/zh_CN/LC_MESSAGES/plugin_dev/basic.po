# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Fallen_Breath
# This file is distributed under the same license as the MCDReforged
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MCDReforged \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-15 15:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../plugin_dev/basic.md:1
msgid "MCDR Plugin"
msgstr ""

#: ../plugin_dev/basic.md:3
msgid "What is a MCDR plugin"
msgstr ""

#: ../plugin_dev/basic.md:5
msgid ""
"An MCDR plugin is a python source file with .py file extension located in"
" plugin directories. The list of the plugin directory can is defined "
"inside the configure file"
msgstr ""

#: ../plugin_dev/basic.md:7
msgid ""
"At start up, MCDR will automatically load every plugin inside the plugin "
"directories. Additionally, MCDR will append all the plugin directories "
"into sys.path, so plugins can import modules placed inside the plugin "
"folders directly"
msgstr ""

#: ../plugin_dev/basic.md:9
msgid ""
"There is a sample plugin named SamplePlugin.py in the plugins/ folder in "
"source and you can check its content for reference"
msgstr ""

#: ../plugin_dev/basic.md:11
msgid "Quick Start"
msgstr ""

#: ../plugin_dev/basic.md:13
msgid ""
"Open one of the plugin directories of MCDR, create a file named "
"HelloWorld.py"
msgstr ""

#: ../plugin_dev/basic.md:20
msgid "open it and enter these code"
msgstr ""

#: ../plugin_dev/basic.md:35
msgid ""
"Return to MCDR console, enter !!MCDR reload plugin, and you should see "
"the hello world message from your plugin"
msgstr ""

#: ../plugin_dev/basic.md:41
msgid "Great, you have successfully created your first plugin"
msgstr ""

#: ../plugin_dev/basic.md:43
msgid "Metadata"
msgstr ""

#: ../plugin_dev/basic.md:45
msgid ""
"The meta data field provides the basic information of the plugin. As you "
"can see in the Quick Start section above, meta data is declared in the "
"global scope. It's a dict contains several key-value with the name "
"PLUGIN_METADATA"
msgstr ""

#: ../plugin_dev/basic.md:47
msgid "Here's a metadata field with all possible key-values"
msgstr ""

#: ../plugin_dev/basic.md:64
msgid ""
"If a plugin doesn't not declare the meta data field, a warning will arise"
" in the console and the fallback values will be used"
msgstr ""

#: ../plugin_dev/basic.md:66
msgid "id"
msgstr ""

#: ../plugin_dev/basic.md:68
msgid ""
"Id, or plugin id, is the identity string of your plugin. It should "
"consist of lowercase letters, numbers and underscores with a length of 1 "
"to 64"
msgstr ""

#: ../plugin_dev/basic.md:70
msgid "Here's some available plugin ids:"
msgstr ""

#: ../plugin_dev/basic.md:72
msgid "my_plugin"
msgstr ""

#: ../plugin_dev/basic.md:73
msgid "anotherhelper123"
msgstr ""

#: ../plugin_dev/basic.md:74
msgid "__a_cool_plugin__"
msgstr ""

#: ../plugin_dev/basic.md:76
msgid "But the following ids are not allowed:"
msgstr ""

#: ../plugin_dev/basic.md:78
msgid "MyPlugin"
msgstr ""

#: ../plugin_dev/basic.md:79
msgid "another-helper-123"
msgstr ""

#: ../plugin_dev/basic.md:80
msgid "a cool plugin"
msgstr ""

#: ../plugin_dev/basic.md:82
msgid ""
"MCDR uses plugin id to distinguish between different plugins and check "
"the dependencies. All loaded plugin in MCDR contain different plugin ids."
" If a newly loaded plugin has a plugin id exactly the same with an "
"existed plugin, the new plugin will fail to load"
msgstr ""

#: ../plugin_dev/basic.md:84
msgid ""
"Choose your plugin id wisely. It's highly suggested to keep your plugin "
"id not changed after release your plugin"
msgstr ""

#: ../plugin_dev/basic.md:86
msgid "Field key: id"
msgstr ""

#: ../plugin_dev/basic.md:87 ../plugin_dev/basic.md:105
#: ../plugin_dev/basic.md:145
msgid "Value type: str"
msgstr ""

#: ../plugin_dev/basic.md:88
msgid "Fallback value: the file name without the .py extension"
msgstr ""

#: ../plugin_dev/basic.md:90
msgid "version"
msgstr ""

#: ../plugin_dev/basic.md:92
msgid ""
"The version value indicates the version of your value. It's mostly in "
"semver format but it has less restriction such as you can have the core "
"version with any length"
msgstr ""

#: ../plugin_dev/basic.md:94
msgid "Here's some available version:"
msgstr ""

#: ../plugin_dev/basic.md:96
msgid "1.0.0"
msgstr ""

#: ../plugin_dev/basic.md:97
msgid "2.0"
msgstr ""

#: ../plugin_dev/basic.md:98
msgid "1.2.3-pre4"
msgstr ""

#: ../plugin_dev/basic.md:99
msgid "1.8.9-rc.8"
msgstr ""

#: ../plugin_dev/basic.md:100
msgid "1.14.1-beta.4+build.54"
msgstr ""

#: ../plugin_dev/basic.md:102
msgid ""
"Following semver format for you version string is a good idea. It's "
"easier to maintain and for people to understand"
msgstr ""

#: ../plugin_dev/basic.md:104
msgid "Field key: version"
msgstr ""

#: ../plugin_dev/basic.md:106
msgid "Fallback value: 0.0.0"
msgstr ""

#: ../plugin_dev/basic.md:108
msgid "name"
msgstr ""

#: ../plugin_dev/basic.md:110
msgid ""
"The name of your plugin. Give your plugin with a nice name with any kinds"
" of characters. RText is allowed here"
msgstr ""

#: ../plugin_dev/basic.md:112
msgid ""
"Try not to make the name too long. For more details of your plugin, you "
"can put them into the description"
msgstr ""

#: ../plugin_dev/basic.md:114
msgid "Field key: name"
msgstr ""

#: ../plugin_dev/basic.md:115 ../plugin_dev/basic.md:125
msgid "Value type: str or RTextBase"
msgstr ""

#: ../plugin_dev/basic.md:116
msgid "Fallback value: The plugin id"
msgstr ""

#: ../plugin_dev/basic.md:118
msgid "description"
msgstr ""

#: ../plugin_dev/basic.md:120
msgid ""
"The description of you plugin. Put the details of your plugin here. Rtext"
" is allowed too"
msgstr ""

#: ../plugin_dev/basic.md:122 ../plugin_dev/basic.md:132
#: ../plugin_dev/basic.md:142
msgid "This field is optional, you can just ignore it if you are lazy"
msgstr ""

#: ../plugin_dev/basic.md:124
msgid "Field key: description"
msgstr ""

#: ../plugin_dev/basic.md:126 ../plugin_dev/basic.md:136
#: ../plugin_dev/basic.md:146 ../plugin_dev/basic.md:249
msgid "Fallback value: None"
msgstr ""

#: ../plugin_dev/basic.md:128
msgid "author"
msgstr ""

#: ../plugin_dev/basic.md:130
msgid ""
"The authors of the plugins. If there's only a single author, you can also"
" use a string instead of a list of string"
msgstr ""

#: ../plugin_dev/basic.md:134
msgid "Field key: author"
msgstr ""

#: ../plugin_dev/basic.md:135
msgid "Value type: str or List[str]"
msgstr ""

#: ../plugin_dev/basic.md:138
msgid "link"
msgstr ""

#: ../plugin_dev/basic.md:140
msgid ""
"The link of your project. You can put a link to the github repository of "
"your plugin here. It should be an available url"
msgstr ""

#: ../plugin_dev/basic.md:144
msgid "Field key: link"
msgstr ""

#: ../plugin_dev/basic.md:148
msgid "dependencies"
msgstr ""

#: ../plugin_dev/basic.md:150
msgid ""
"A dict of dependencies you plugin relies on. It's a dict contains several"
" key-value pairs. The key is the id of the plugin that your plugin is "
"relies on, and the value is the version requirement of the plugin that "
"your plugin is relies on"
msgstr ""

#: ../plugin_dev/basic.md:152
msgid ""
"If your plugin has requirement to the version of MCDR, use mcdreforged as"
" the plugin id"
msgstr ""

#: ../plugin_dev/basic.md:154
msgid ""
"A version requirement is a string than contains several criterions of the"
" version. Criterions are divided by space character, each criterion is "
"made up of an operator and a base version string. Wildcard is allowed "
"when describing the base version"
msgstr ""

#: ../plugin_dev/basic.md:156
msgid "List of the operators:"
msgstr ""

#: ../plugin_dev/basic.md:228
msgid "Check here for more detail to the version requirement"
msgstr ""

#: ../plugin_dev/basic.md:230
msgid ""
"If there are multiple declared criterions, the target version is accepted"
" only when it's accepted by all criterions"
msgstr ""

#: ../plugin_dev/basic.md:232
msgid "Here a dependencies example:"
msgstr ""

#: ../plugin_dev/basic.md:243
msgid ""
"MCDR will make sure only when all dependency requirements are satisfied "
"your plugin will get loaded successfully. Missing dependency, dependency "
"version not match or dependency loop will result in a dependency check "
"failure"
msgstr ""

#: ../plugin_dev/basic.md:245
msgid ""
"This field is optional, you can just ignore it if your plugin doesn't "
"have any dependency"
msgstr ""

#: ../plugin_dev/basic.md:247
msgid "Field key: dependencies"
msgstr ""

#: ../plugin_dev/basic.md:248
msgid "Value type: Dict[str, str]"
msgstr ""

#: ../plugin_dev/basic.md:252
msgid "Plugin Registry"
msgstr ""

#: ../plugin_dev/basic.md:254
msgid ""
"Plugin registry is a collection of things that plugin registered for. It "
"will get cleaned up every time before the plugin gets loaded, so you'd "
"better register them in Plugin Load event"
msgstr ""

#: ../plugin_dev/basic.md:256
msgid "Event listeners"
msgstr ""

#: ../plugin_dev/basic.md:258
msgid "There are 2 methods to register an event listener for you plugin"
msgstr ""

#: ../plugin_dev/basic.md:260
msgid ""
"Declare a function inside the global slope with the specific name. It's "
"the legacy registering method to register a listener and it only works "
"with events provided by MCDR. Check here for more detail"
msgstr ""

#: ../plugin_dev/basic.md:262
msgid ""
"For example, the widely-used function below is a default Plugin Loaded "
"event listener"
msgstr ""

#: ../plugin_dev/basic.md:269
msgid ""
"Manually invoke server.register_event_listener method to register an "
"event listener. You can specify the callable object and the priority for "
"the event listener"
msgstr ""

#: ../plugin_dev/basic.md:271
msgid "Check here for more detail about event listener registering"
msgstr ""

#: ../plugin_dev/basic.md:273
msgid "Here some examples about manually register event listeners"
msgstr ""

#: ../plugin_dev/basic.md:287
msgid ""
"Take a look at the reference of register_event_listener method in "
"ServerInterface document for more detail"
msgstr ""

#: ../plugin_dev/basic.md:289
msgid "Command"
msgstr ""

#: ../plugin_dev/basic.md:291
msgid ""
"Rather than manually parsing info.content inside user info event callback"
" like on_user_info, MCDR provides a command system for plugins to "
"register their commands"
msgstr ""

#: ../plugin_dev/basic.md:293
msgid "Check the command document for more detail about building a command tree"
msgstr ""

#: ../plugin_dev/basic.md:295
msgid ""
"Assuming that you have already built a command tree with root literal "
"node root, then you can use the following command to register your "
"command tree in MCDR"
msgstr ""

#: ../plugin_dev/basic.md:301
msgid ""
"Take a look at the reference of register_command method in "
"ServerInterface document for more details of its usage"
msgstr ""

#: ../plugin_dev/basic.md:303
msgid "Help message"
msgstr ""

#: ../plugin_dev/basic.md:305
msgid ""
"Plugin can register its help message with server.register_help_message to"
" MCDR, so that users can use !!help command to view the help messages of "
"all commands"
msgstr ""

#: ../plugin_dev/basic.md:307
msgid ""
"Take a look at the reference of register_help_message method in "
"ServerInterface document for more details of its usage"
msgstr ""

