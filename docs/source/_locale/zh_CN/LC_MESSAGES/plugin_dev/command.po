# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Fallen_Breath
# This file is distributed under the same license as the MCDReforged
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MCDReforged \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-15 15:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../plugin_dev/command.md:1
msgid "Command"
msgstr ""

#: ../plugin_dev/command.md:3
msgid ""
"Tired of manually splitting argument and parsing commands? Being annoyed "
"by the complicated argument conditions? Go try the MCDR command building "
"system!"
msgstr ""

#: ../plugin_dev/command.md:5
msgid ""
"MCDR contains a command tree building system for plugins to build their "
"commands. It behaves like a lite version of mojang's brigadier"
msgstr ""

#: ../plugin_dev/command.md:7
msgid "Workflow"
msgstr ""

#: ../plugin_dev/command.md:9
msgid ""
"MCDR maintains a dict to store registered commands. Any value in the "
"storage dict is a list of literal node as a root node of a command tree, "
"and the related key is the literal value of the root literal node. With "
"it, MCDR can quickly find the possible command tree that might accept the"
" incoming command"
msgstr ""

#: ../plugin_dev/command.md:11
msgid ""
"Every time when a user info is being processed, MCDR will try to parse "
"the user input as a command. It will takes the first segment of the user "
"input as a key to query the command tree storage dict. If it gets any, it"
" will prevent the info to be sent to the standard input stream of the "
"server by invoking info.cancel_send_to_server(), then it will let the "
"found command trees to handle the command."
msgstr ""

#: ../plugin_dev/command.md:13
msgid ""
"If an command error occurs and the error has not been set to handled, "
"MCDR will sent the default translated command error message to the "
"command source"
msgstr ""

#: ../plugin_dev/command.md:15
msgid "A Quick Peek"
msgstr ""

#: ../plugin_dev/command.md:17
msgid ""
"Let's peek into the actual operation of a command tree. As an example, "
"let's say that there are 3 kinds of commands:"
msgstr ""

#: ../plugin_dev/command.md:19
msgid "!!email list"
msgstr ""

#: ../plugin_dev/command.md:20
msgid "!!email remove <email_id>"
msgstr ""

#: ../plugin_dev/command.md:21
msgid "!!email send <player> <message>"
msgstr ""

#: ../plugin_dev/command.md:23
msgid ""
"To implement these commands, we can build a command tree with MCDR like "
"this:"
msgstr ""

#: ../plugin_dev/command.md:35
msgid ""
"When MCDR executes the command !!email remove 21, the following things "
"will happen"
msgstr ""

#: ../plugin_dev/command.md:37
msgid "Parsing at node Literal('!!email') with command !!email remove 21"
msgstr ""

#: ../plugin_dev/command.md:38
msgid ""
"Literal Node Literal('!!email') gets the first element of !!email remove "
"21, it's !!email and it matches the literal node"
msgstr ""

#: ../plugin_dev/command.md:39
msgid "Now the remaining command is remove 21"
msgstr ""

#: ../plugin_dev/command.md:40
msgid ""
"And then, it searches through its literal children, found the child node "
"Literal('remove') matches the next literal element remove"
msgstr ""

#: ../plugin_dev/command.md:41
msgid "Then it let that child node to handle the rest of the command"
msgstr ""

#: ../plugin_dev/command.md:42
msgid "Parsing at node Literal('remove') with command remove 21"
msgstr ""

#: ../plugin_dev/command.md:43
msgid ""
"Literal Node Literal('remove') gets the first element of remove 21, it's "
"remove and it matches the literal node"
msgstr ""

#: ../plugin_dev/command.md:44
msgid "Now the remaining command is 21"
msgstr ""

#: ../plugin_dev/command.md:45
msgid ""
"And then it searches through its literal children, but doesn't found any "
"literal child matches the next element 21"
msgstr ""

#: ../plugin_dev/command.md:46
msgid ""
"So it let its non-literal child Integer('email_id') to handle the rest of"
" the command"
msgstr ""

#: ../plugin_dev/command.md:47
msgid "Parsing at node Integer('email_id') with command 21"
msgstr ""

#: ../plugin_dev/command.md:48
msgid ""
"Integer Node Integer('email_id') gets the first element of 21, it's a "
"legal integer"
msgstr ""

#: ../plugin_dev/command.md:49
msgid "It store the value 21 to the context dict with key email_id"
msgstr ""

#: ../plugin_dev/command.md:50
msgid ""
"And then it finds that the command parsing is already finished so it "
"invokes the callback function with the command source and the context "
"dict as the argument."
msgstr ""

#: ../plugin_dev/command.md:51
msgid "The command parsing finishes"
msgstr ""

#: ../plugin_dev/command.md:53
msgid ""
"This is a quick overview of the implantation logic part of command "
"building system. It's mainly for help you build a perceptual "
"understanding of the command tree based command building system"
msgstr ""

#: ../plugin_dev/command.md:55
msgid ""
"Matching the literal nodes, parsing the remaining command, storing the "
"parsed value inside the context dict, this is how the command system "
"works"
msgstr ""

#: ../plugin_dev/command.md:57
msgid ""
"Rather than reading this document, anther good way to learn to use the "
"MCDR command building system is to refer and imitate existing codes. You "
"can find the command building code of !!MCDR command in the "
"__register_commands method of class "
"mcdreforged.plugin.permanent.mcdreforged_plugin.MCDReforgedPlugin"
msgstr ""

#: ../plugin_dev/command.md:59
msgid "Argument Nodes"
msgstr ""

#: ../plugin_dev/command.md:61
msgid "A list of MCDR built-in argument nodes and their usage"
msgstr ""

#: ../plugin_dev/command.md:63
msgid "ArgumentNode"
msgstr ""

#: ../plugin_dev/command.md:65
msgid ""
"Argument Node is base node of all argument nodes. It's also a abstract "
"class. It provides several methods for building up the command tree"
msgstr ""

#: ../plugin_dev/command.md:67
msgid "then"
msgstr ""

#: ../plugin_dev/command.md:73
msgid "Attach a child node to its children list, and then return itself"
msgstr ""

#: ../plugin_dev/command.md:75
msgid "It's used for building the command tree structure"
msgstr ""

#: ../plugin_dev/command.md:77
msgid ""
"Parameter node: A node instance to be added to current node's children "
"list"
msgstr ""

#: ../plugin_dev/command.md:79
msgid ""
"The command tree in the Quick Peek section can be built with the "
"following codes"
msgstr ""

#: ../plugin_dev/command.md:103
msgid "runs"
msgstr ""

#: ../plugin_dev/command.md:109
msgid ""
"Set the callback function of this node. When the command parsing finished"
" at this node, the callback function will be executed"
msgstr ""

#: ../plugin_dev/command.md:111
msgid ""
"Parameter func: A callable that accepts up to 2 arguments. Argument list:"
" CommandSource, dict (context)"
msgstr ""

#: ../plugin_dev/command.md:113
msgid ""
"The callback function is allowed to accepted 0 to 2 arguments (a "
"CommandSource as command source and a dict as context). For example, the "
"following 4 functions are available callbacks"
msgstr ""

#: ../plugin_dev/command.md:132
msgid "Both of them can be used as the argument of the runs method"
msgstr ""

#: ../plugin_dev/command.md:134
msgid ""
"This dynamic callback argument adaptation is used in all callback "
"invoking of the command nodes"
msgstr ""

#: ../plugin_dev/command.md:136
msgid "requires"
msgstr ""

#: ../plugin_dev/command.md:142
msgid ""
"Set the requirement tester callback of the node. When entering this node,"
" MCDR will invoke the requirement tester to see if the current command "
"source and context match your specific condition."
msgstr ""

#: ../plugin_dev/command.md:144
msgid ""
"If the tester callback return True, nothing will happen, MCDR will "
"continue parsing the rest of the command"
msgstr ""

#: ../plugin_dev/command.md:146
msgid ""
"If the tester callback return False, a RequirementNotMet exception will "
"be risen. At this time if the failure_message_getter parameter is "
"available, MCDR will invoke failure_message_getter to get the message "
"string as the RequirementNotMet exception, otherwise a default message "
"will be used"
msgstr ""

#: ../plugin_dev/command.md:148
msgid ""
"Parameter requirement: A callable that accepts up to 2 arguments and "
"returns a bool. Argument list: CommandSource, dict (context)"
msgstr ""

#: ../plugin_dev/command.md:150
msgid ""
"Parameter failure_message_getter: An optional callable that accepts up to"
" 2 arguments and returns a str. Argument list: CommandSource, dict "
"(context)"
msgstr ""

#: ../plugin_dev/command.md:152
msgid "Some Example usages:"
msgstr ""

#: ../plugin_dev/command.md:160
msgid "redirects"
msgstr ""

#: ../plugin_dev/command.md:166
msgid ""
"Redirect all further child nodes command parsing to another given node. "
"When you want a short command and and full-path command that will all "
"execute the same commands, redirects will make it simpler"
msgstr ""

#: ../plugin_dev/command.md:168
msgid ""
"Parameter redirect_node: A node instance which current node is "
"redirecting to"
msgstr ""

#: ../plugin_dev/command.md:170 ../plugin_dev/command.md:236
msgid "Examples:"
msgstr ""

#: ../plugin_dev/command.md:184
msgid "Command starts at root_executor"
msgstr ""

#: ../plugin_dev/command.md:186
msgid "These commands:"
msgstr ""

#: ../plugin_dev/command.md:188
msgid "\"foo a long way to the command x\""
msgstr ""

#: ../plugin_dev/command.md:189
msgid "\"foo a long way to the command y\""
msgstr ""

#: ../plugin_dev/command.md:190
msgid "\"foo a long way to the command z\""
msgstr ""

#: ../plugin_dev/command.md:192
msgid "are the same to"
msgstr ""

#: ../plugin_dev/command.md:194
msgid "\"foo quick x\""
msgstr ""

#: ../plugin_dev/command.md:195
msgid "\"foo quick y\""
msgstr ""

#: ../plugin_dev/command.md:196
msgid "\"foo quick z\""
msgstr ""

#: ../plugin_dev/command.md:198
msgid ""
"Pay attention to the difference between redirects and then. redirects is "
"to redirect the child nodes, and then is to add a child node. If you do "
"something like this:"
msgstr ""

#: ../plugin_dev/command.md:205
msgid "Then all commands which eventually executes do_something1 will be:"
msgstr ""

#: ../plugin_dev/command.md:207
msgid "foo a long way to the command x"
msgstr ""

#: ../plugin_dev/command.md:208
msgid "foo quick x"
msgstr ""

#: ../plugin_dev/command.md:209
msgid "foo fast command x"
msgstr ""

#: ../plugin_dev/command.md:212
msgid "on_error"
msgstr ""

#: ../plugin_dev/command.md:218
msgid ""
"When a command error occurs, the given will invoke the given handler to "
"handle with the error"
msgstr ""

#: ../plugin_dev/command.md:220
msgid "Parameter error_type: A class that is subclass of CommandError"
msgstr ""

#: ../plugin_dev/command.md:222
msgid ""
"Parameter handler: A callable that accepts up to 3 arguments. Argument "
"list: CommandSource, CommandError, dict (context)"
msgstr ""

#: ../plugin_dev/command.md:224
msgid ""
"Keyword Parameter handled: If handled is set to True, error.set_handled()"
" is called automatically when invoking the handler callback"
msgstr ""

#: ../plugin_dev/command.md:226
msgid "For uses about error.set_handled(), check the CommandError class reference"
msgstr ""

#: ../plugin_dev/command.md:228
msgid "Literal"
msgstr ""

#: ../plugin_dev/command.md:230
msgid ""
"Literal node is a special node. It doesn't output any value. It's more "
"like a command branch carrier"
msgstr ""

#: ../plugin_dev/command.md:232
msgid ""
"Literal node can accept a str as its literal in its constructor. A "
"literal node accepts the parsing command only when the next element of "
"the parsing command exactly matches the literal of the node"
msgstr ""

#: ../plugin_dev/command.md:234
msgid "Literal node is the only node that can start a command execution"
msgstr ""

#: ../plugin_dev/command.md:245
msgid "NumberNode"
msgstr ""

#: ../plugin_dev/command.md:247
msgid ""
"It's an abstract class. It's inherited by Number, Integer and Float. It "
"represents a type of number based node"
msgstr ""

#: ../plugin_dev/command.md:249
msgid ""
"For a NumberNode instance, you can restrict the range of the number "
"argument. If the parsed number is out of range, a NumberOutOfRange "
"exception will be risen"
msgstr ""

#: ../plugin_dev/command.md:251
msgid "By default there's no range restriction"
msgstr ""

#: ../plugin_dev/command.md:253
msgid "at_min"
msgstr ""

#: ../plugin_dev/command.md:259
msgid "Set the lower boundary of the range restriction to min_value"
msgstr ""

#: ../plugin_dev/command.md:261
msgid "at_max"
msgstr ""

#: ../plugin_dev/command.md:267
msgid "Set the higher boundary of the range restriction to max_value"
msgstr ""

#: ../plugin_dev/command.md:269
msgid "in_range"
msgstr ""

#: ../plugin_dev/command.md:275
msgid ""
"Set the lower and the higher boundary of the range restriction at the "
"same time"
msgstr ""

#: ../plugin_dev/command.md:277
msgid "Number"
msgstr ""

#: ../plugin_dev/command.md:279
msgid ""
"A Number node accepts a number argument. It can be an integer or an "
"float. If the next element is not a number, a InvalidNumber exception "
"will be risen"
msgstr ""

#: ../plugin_dev/command.md:281
msgid "Integer"
msgstr ""

#: ../plugin_dev/command.md:283
msgid ""
"An Integer node accepts a int argument. It can only be an integer. If the"
" next element is not an integer, a InvalidInteger exception will be risen"
msgstr ""

#: ../plugin_dev/command.md:285
msgid "Float"
msgstr ""

#: ../plugin_dev/command.md:287
msgid ""
"A Float node accepts a float argument. It can only be a float. If the "
"next element is not a float, a InvalidFloat exception will be risen"
msgstr ""

#: ../plugin_dev/command.md:289
msgid "TextNode"
msgstr ""

#: ../plugin_dev/command.md:291
msgid ""
"It's an abstract class. It's inherited by Text, QuotableText and "
"GreedyText. It represents a type of text based node"
msgstr ""

#: ../plugin_dev/command.md:293
msgid ""
"For a TextNode instance, you can restrict the length range of the str "
"text argument. If the length of the parsed text is out of range, a "
"TextLengthOutOfRange exception will be risen"
msgstr ""

#: ../plugin_dev/command.md:295
msgid "By default there's no length range restriction"
msgstr ""

#: ../plugin_dev/command.md:297
msgid "at_min_length"
msgstr ""

#: ../plugin_dev/command.md:303
msgid "Set the lower boundary of the length range restriction to min_length"
msgstr ""

#: ../plugin_dev/command.md:305
msgid "at_max_length"
msgstr ""

#: ../plugin_dev/command.md:311
msgid "Set the higher boundary of the length range restriction to max_length"
msgstr ""

#: ../plugin_dev/command.md:313
msgid "in_length_range"
msgstr ""

#: ../plugin_dev/command.md:319
msgid ""
"Set the lower and the higher boundary of the length range restriction at "
"the same time"
msgstr ""

#: ../plugin_dev/command.md:321
msgid "Text"
msgstr ""

#: ../plugin_dev/command.md:323
msgid ""
"A Text node accepts a single string element. Since space character is the"
" divider character of MCDR command parsing. Text nodes will keep taking "
"the continuous string segment until they meet a space character"
msgstr ""

#: ../plugin_dev/command.md:325
msgid "QuotableText"
msgstr ""

#: ../plugin_dev/command.md:327
msgid ""
"A QuotableText works just like a Text argument node, but it gives user a "
"way to input text with space character: Use two double quotes to enclose "
"the text content"
msgstr ""

#: ../plugin_dev/command.md:329
msgid ""
"If you use two double quotes to enclose the text content, You can use "
"escape character \\ to escape double quotes \" and escape character \\ "
"itself"
msgstr ""

#: ../plugin_dev/command.md:331
msgid "For example, here are some texts that accepted by QuotableText:"
msgstr ""

#: ../plugin_dev/command.md:333
msgid "Something"
msgstr ""

#: ../plugin_dev/command.md:334
msgid "\"Someting with space characters\""
msgstr ""

#: ../plugin_dev/command.md:335
msgid "\"or escapes \\\\ like \\\" this\""
msgstr ""

#: ../plugin_dev/command.md:337
msgid "GreedyText"
msgstr ""

#: ../plugin_dev/command.md:339
msgid ""
"The principle of GreedyText is quite simple: It greedily take out all "
"remaining texts in the commands"
msgstr ""

#: ../plugin_dev/command.md:341
msgid ""
"It's not a smart decision to append any child nodes to a GreedyText, "
"since the child nodes can never get any remaining command"
msgstr ""

#: ../plugin_dev/command.md:343
msgid "Customize"
msgstr ""

#: ../plugin_dev/command.md:345
msgid ""
"MCDR also supports customize an argument node. It might save you same "
"repeated work on building your command"
msgstr ""

#: ../plugin_dev/command.md:347
msgid ""
"To create a custom a argument node, you need to declare a class inherited"
" from ArgumentNode, and then implement the parse method logic. That's it,"
" the custom node class is ready to be used"
msgstr ""

#: ../plugin_dev/command.md:349
msgid ""
"Custom exception provides a precise way to handle your exception with "
"on_error method. If you want to raise a custom exception when your "
"argument node fails to parsing the text, you need to have the custom "
"exception inherited from CommandSyntaxError"
msgstr ""

#: ../plugin_dev/command.md:351
msgid ""
"Here's a quick example of a custom Argument node, PointArgument. It "
"accepts continuous 3 float input as a coordinate and batch them in to a "
"list as a point. It raises IllegalPoint if it gets a non-float input, or "
"IncompletePoint if the command ends before it finishes reading 3 floats"
msgstr ""

#: ../plugin_dev/command.md:379
msgid "For its usage, here's a simple example as well as an input/output table:"
msgstr ""

