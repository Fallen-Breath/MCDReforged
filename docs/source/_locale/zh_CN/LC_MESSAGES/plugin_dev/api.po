# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Fallen_Breath
# This file is distributed under the same license as the MCDReforged
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MCDReforged \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-17 13:19+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/plugin_dev/api.rst:3
msgid "API Packages for Plugins"
msgstr ""

#: ../../source/plugin_dev/api.rst:5
msgid ""
"When your plugin needs to import something from MCDR, rather than "
"directly import the package you want, you can import the packages in "
"``mcdreforged.api``"
msgstr ""

#: ../../source/plugin_dev/api.rst:7
msgid ""
"``mcdreforged.api`` is the package for plugin developers to import. By "
"only importing from the api package, the import of the target class in "
"the plugin can be decoupled from the actual location of the target class."
" If MCDR refactors the target class and moves its location in the future,"
" only importing from the api package can keep your plugin unaffected"
msgstr ""

#: ../../source/plugin_dev/api.rst:10
msgid "all"
msgstr ""

#: ../../source/plugin_dev/api.rst:16
msgid ""
"This is the simplest way to import everything you want for plugin "
"development. It's a life saver for lazy man"
msgstr ""

#: ../../source/plugin_dev/api.rst:18
msgid "Continue reading to see what it will actually import"
msgstr ""

#: ../../source/plugin_dev/api.rst:21
msgid "command"
msgstr ""

#: ../../source/plugin_dev/api.rst:23
msgid ""
"``command`` package contains the necessities for building a command tree "
"or create your own command, including command tree node classes, command "
"exceptions and some command utils"
msgstr ""

#: ../../source/plugin_dev/api.rst:25
msgid ""
"For example, if you want the class ``Literal`` and ``IllegalArgument`` "
"for building your command tree ``on_error`` exception handling, you can "
"do it like this"
msgstr ""

#: ../../source/plugin_dev/api.rst:31
msgid "Of course if you are lazy enough you can just"
msgstr ""

#: ../../source/plugin_dev/api.rst:38
msgid "decorator"
msgstr ""

#: ../../source/plugin_dev/api.rst:40
msgid ""
"``decorator`` package contains some useful function decorators for plugin"
" development"
msgstr ""

#: ../../source/plugin_dev/api.rst:43
msgid "new_thread"
msgstr ""

#: ../../source/plugin_dev/api.rst:45
msgid ""
"This is a one line solution to make your function executes "
"asynchronously. When decorated with this decorator, functions will be "
"executed in a new daemon thread"
msgstr ""

#: ../../source/plugin_dev/api.rst:47
msgid ""
"This decorator only changes the return value of the function to the "
"created ``Thread`` instance. Beside the return value, it reserves all "
"signatures of the decorated function, so you can safely use the decorated"
" function as if there's no decorating at all"
msgstr ""

#: ../../source/plugin_dev/api.rst:49
msgid "It's also a simple compatible upgrade method for old MCDR 0.x plugins"
msgstr ""

#: ../../source/plugin_dev/api.rst:51
msgid "Example:"
msgstr ""

#: ../../source/plugin_dev/api.rst:72
msgid ""
"The only difference between ``do_something1`` and ``do_something2`` is "
"that ``do_something2`` is decorated by ``@new_thread``. So when executing"
" ``do_something2``\\ , it won't lag the following execution of MCDR like "
"``do_something1`` since ``do_something2`` will execute on another thread"
msgstr ""

#: ../../source/plugin_dev/api.rst:74
msgid ""
"If you want to wait for the decorated function to complete, you can "
"simple use the ``join`` method from class ``threading.Thread``. Remember "
"the return value of the decorated function has already been changed in to"
" the ``Thread`` instance"
msgstr ""

#: ../../source/plugin_dev/api.rst:80
msgid ""
"In addition to simply and directly use a raw ``@new_thread``\\ , it's "
"recommend to add a thread name argument for the decorator"
msgstr ""

#: ../../source/plugin_dev/api.rst:89
msgid ""
"So when you logs something by ``server.logger``\\ , a meaningful thread "
"name will be displayed instead of a plain and meaningless ``Thread-3``"
msgstr ""

#: ../../source/plugin_dev/api.rst:91
msgid ""
"**Notes**\\ : Some api methods in ``ServerInterface`` class are required "
"to be invoked in the MCDR task executor thread. Invoking them in another "
"thread might result in an exception"
msgstr ""

#: ../../source/plugin_dev/api.rst:94
msgid "event"
msgstr ""

#: ../../source/plugin_dev/api.rst:96
msgid ""
"``event`` package contains the classes for creating custom events, and "
"classes of MCDR built-in events"
msgstr ""

#: ../../source/plugin_dev/api.rst:98
msgid ""
"You might already read the `dispatch_event <classes/ServerInterface.html"
"#dispatch-event>`__ method in ``ServerInterface`` class. It only accepts "
"a ``PluginEvent`` instance as its first parameter. So if you want to "
"dispatch your custom event, create a ``LiteralEvent`` for simpleness or a"
" custom event class inherited from ``PluginEvent``"
msgstr ""

#: ../../source/plugin_dev/api.rst:101
msgid "rcon"
msgstr ""

#: ../../source/plugin_dev/api.rst:103
msgid ""
"Package ``rcon`` contains a single class ``RconConnection``. It's is a "
"simply rcon client for connect to any Minecraft servers that supports "
"rcon protocol"
msgstr ""

#: ../../source/plugin_dev/api.rst:107
msgid "RconConnection"
msgstr ""

#: ../../source/plugin_dev/api.rst:113
msgid "Create a rcon client instance"
msgstr ""

#: ../../source/plugin_dev/api.rst:115
msgid "Parameter *address*\\ : The address of the rcon server"
msgstr ""

#: ../../source/plugin_dev/api.rst:117
msgid "Parameter *port*\\ : The port if the rcon server"
msgstr ""

#: ../../source/plugin_dev/api.rst:119
msgid "Parameter *password*\\ : The password of the rcon connection"
msgstr ""

#: ../../source/plugin_dev/api.rst:121
msgid ""
"Keyword Parameter *logger*\\ : An instance of ``logging.Logger``. It's "
"used to output some warning information like failing to receive a packet"
msgstr ""

#: ../../source/plugin_dev/api.rst:124
msgid "connect"
msgstr ""

#: ../../source/plugin_dev/api.rst:130
msgid ""
"Start a connection to the rcon server and tries to login. If login "
"success it will return ``True``\\ , otherwise ``False``"
msgstr ""

#: ../../source/plugin_dev/api.rst:133
msgid "disconnect"
msgstr ""

#: ../../source/plugin_dev/api.rst:139
msgid "Disconnect from the server"
msgstr ""

#: ../../source/plugin_dev/api.rst:142
msgid "send_command"
msgstr ""

#: ../../source/plugin_dev/api.rst:148
msgid ""
"Send  command to the rcon server, and return the command execution result"
" form the server"
msgstr ""

#: ../../source/plugin_dev/api.rst:150
msgid "Parameter *command*\\ : The command you want to send to the server"
msgstr ""

#: ../../source/plugin_dev/api.rst:152
msgid ""
"Parameter *max_retry_time*\\ : The maximum retry time of the operation. "
"This method will return None if *max_retry_time* retries exceeded"
msgstr ""

#: ../../source/plugin_dev/api.rst:155
msgid "rtext"
msgstr ""

#: ../../source/plugin_dev/api.rst:157
msgid ""
"Recommend to read the page `Raw JSON text format "
"<https://minecraft.gamepedia.com/Raw_JSON_text_format>`__ in Minecraft "
"Wiki first"
msgstr ""

#: ../../source/plugin_dev/api.rst:159
msgid "This is an advance text component library for Minecraft"
msgstr ""

#: ../../source/plugin_dev/api.rst:161
msgid ""
"Inspired by the `MCD stext API <https://github.com/TISUnion/rtext>`__ "
"made by `Pandaria98 <https://github.com/Pandaria98>`__"
msgstr ""

#: ../../source/plugin_dev/api.rst:164
msgid "RColor"
msgstr ""

#: ../../source/plugin_dev/api.rst:166
msgid "``RColor`` is an enum class storing all Minecraft color codes"
msgstr ""

#: ../../source/plugin_dev/api.rst:169
msgid "``RColor.black``"
msgstr ""

#: ../../source/plugin_dev/api.rst:170
msgid "``RColor.dark_blue``"
msgstr ""

#: ../../source/plugin_dev/api.rst:171
msgid "``RColor.dark_green``"
msgstr ""

#: ../../source/plugin_dev/api.rst:172
msgid "``RColor.dark_aqua``"
msgstr ""

#: ../../source/plugin_dev/api.rst:173
msgid "``RColor.dark_red``"
msgstr ""

#: ../../source/plugin_dev/api.rst:174
msgid "``RColor.dark_purple``"
msgstr ""

#: ../../source/plugin_dev/api.rst:175
msgid "``RColor.gold``"
msgstr ""

#: ../../source/plugin_dev/api.rst:176
msgid "``RColor.gray``"
msgstr ""

#: ../../source/plugin_dev/api.rst:177
msgid "``RColor.dark_gray``"
msgstr ""

#: ../../source/plugin_dev/api.rst:178
msgid "``RColor.blue``"
msgstr ""

#: ../../source/plugin_dev/api.rst:179
msgid "``RColor.green``"
msgstr ""

#: ../../source/plugin_dev/api.rst:180
msgid "``RColor.aqua``"
msgstr ""

#: ../../source/plugin_dev/api.rst:181
msgid "``RColor.red``"
msgstr ""

#: ../../source/plugin_dev/api.rst:182
msgid "``RColor.light_purple``"
msgstr ""

#: ../../source/plugin_dev/api.rst:183
msgid "``RColor.yellow``"
msgstr ""

#: ../../source/plugin_dev/api.rst:184
msgid "``RColor.white``"
msgstr ""

#: ../../source/plugin_dev/api.rst:185
msgid "``RColor.reset``"
msgstr ""

#: ../../source/plugin_dev/api.rst:188
msgid "RStyle"
msgstr ""

#: ../../source/plugin_dev/api.rst:190
msgid "``RStyle`` is an enum class storing all Minecraft text styles"
msgstr ""

#: ../../source/plugin_dev/api.rst:193
msgid "``RStyle.bold``"
msgstr ""

#: ../../source/plugin_dev/api.rst:194
msgid "``RStyle.italic``"
msgstr ""

#: ../../source/plugin_dev/api.rst:195
msgid "``RStyle.underlined``"
msgstr ""

#: ../../source/plugin_dev/api.rst:196
msgid "``RStyle.strike_through``"
msgstr ""

#: ../../source/plugin_dev/api.rst:197
msgid "``RStyle.obfuscated``"
msgstr ""

#: ../../source/plugin_dev/api.rst:200
msgid "RAction"
msgstr ""

#: ../../source/plugin_dev/api.rst:202
msgid "``RAction`` is a enum class storing all click event actions"
msgstr ""

#: ../../source/plugin_dev/api.rst:205
msgid "``RAction.suggest_command``"
msgstr ""

#: ../../source/plugin_dev/api.rst:206
msgid "``RAction.run_command``"
msgstr ""

#: ../../source/plugin_dev/api.rst:207
msgid "``RAction.open_url``"
msgstr ""

#: ../../source/plugin_dev/api.rst:208
msgid "``RAction.open_file``"
msgstr ""

#: ../../source/plugin_dev/api.rst:209
msgid "``RAction.copy_to_clipboard``"
msgstr ""

#: ../../source/plugin_dev/api.rst:212
msgid "RTextBase"
msgstr ""

#: ../../source/plugin_dev/api.rst:214
msgid ""
"``RTextBase`` is an abstract class of text component. It's the base class"
" of ``RText`` and ``RTextList``"
msgstr ""

#: ../../source/plugin_dev/api.rst:217
msgid "to_json_object"
msgstr ""

#: ../../source/plugin_dev/api.rst:223 ../../source/plugin_dev/api.rst:243
#: ../../source/plugin_dev/api.rst:254 ../../source/plugin_dev/api.rst:265
#: ../../source/plugin_dev/api.rst:276
msgid "Abstract method"
msgstr ""

#: ../../source/plugin_dev/api.rst:225
msgid ""
"Return an object representing it's data that can be serialized into json "
"string"
msgstr ""

#: ../../source/plugin_dev/api.rst:228
msgid "to_json_str"
msgstr ""

#: ../../source/plugin_dev/api.rst:234
msgid ""
"Return a json formatted str representing it's data. It can be used as the"
" second parameter in command ``/tellraw <target> <message>`` and more"
msgstr ""

#: ../../source/plugin_dev/api.rst:237
msgid "to_plain_text"
msgstr ""

#: ../../source/plugin_dev/api.rst:245
msgid ""
"Return a plain text for console display. Click event and hover event will"
" be ignored"
msgstr ""

#: ../../source/plugin_dev/api.rst:248
msgid "copy"
msgstr ""

#: ../../source/plugin_dev/api.rst:256
msgid "Return a copy version of itself"
msgstr ""

#: ../../source/plugin_dev/api.rst:259
msgid "set_color"
msgstr ""

#: ../../source/plugin_dev/api.rst:267
msgid "Set the color of the text and return the text component itself"
msgstr ""

#: ../../source/plugin_dev/api.rst:270
msgid "set_styles"
msgstr ""

#: ../../source/plugin_dev/api.rst:278
msgid "Set the styles of the text and return the text component itself"
msgstr ""

#: ../../source/plugin_dev/api.rst:281
msgid "set_click_event"
msgstr ""

#: ../../source/plugin_dev/api.rst:287
msgid ""
"Set the click event with given *action* and *value* and return the text "
"component itself"
msgstr ""

#: ../../source/plugin_dev/api.rst:289
msgid "Parameter *action*\\ : The type of the action"
msgstr ""

#: ../../source/plugin_dev/api.rst:291
msgid "Parameter *value*\\ : The string value of the action"
msgstr ""

#: ../../source/plugin_dev/api.rst:293
msgid "Method ``c`` is the short form of method ``set_click_event``"
msgstr ""

#: ../../source/plugin_dev/api.rst:296
msgid "set_hover_text"
msgstr ""

#: ../../source/plugin_dev/api.rst:302
msgid ""
"Set the hover text with given *\\*\\ args* and return the text component "
"itself"
msgstr ""

#: ../../source/plugin_dev/api.rst:304
msgid ""
"Parameter *action*\\ : The elements be used to create a ``RTextList`` "
"instance. The ``RTextList`` instance is used as the actual hover text"
msgstr ""

#: ../../source/plugin_dev/api.rst:306
msgid "Method ``h`` is the short form of method ``set_hover_text``"
msgstr ""

#: ../../source/plugin_dev/api.rst:309
msgid "RText"
msgstr ""

#: ../../source/plugin_dev/api.rst:311
msgid "The regular text component class"
msgstr ""

#: ../../source/plugin_dev/api.rst:317
msgid ""
"Create an ``RText`` object with specific text, color and style. "
"``styles`` can be a ``RStyle`` or a collection of ``RStyle``"
msgstr ""

#: ../../source/plugin_dev/api.rst:320 ../../source/plugin_dev/api.rst:325
msgid "RTextTranslation"
msgstr ""

#: ../../source/plugin_dev/api.rst:322
msgid "The translation text component class. It's almost the same as ``RText``"
msgstr ""

#: ../../source/plugin_dev/api.rst:331
msgid ""
"Create a RTextTranslation object with specific translation_key. The rest "
"of the parameters are the same to ``RText``"
msgstr ""

#: ../../source/plugin_dev/api.rst:333
msgid ""
"Example: ``RTextTranslation('advancements.nether.root.title', "
"color=RColor.red)``"
msgstr ""

#: ../../source/plugin_dev/api.rst:336 ../../source/plugin_dev/api.rst:341
msgid "RTextList"
msgstr ""

#: ../../source/plugin_dev/api.rst:338
msgid "A list of RTextBase objects"
msgstr ""

#: ../../source/plugin_dev/api.rst:347
msgid "Use the given *\\*\\ args* to create a ``RTextList``"
msgstr ""

#: ../../source/plugin_dev/api.rst:349 ../../source/plugin_dev/api.rst:360
msgid ""
"Objects in ``*args`` can be a ``str``\\ , a ``RTextBase`` or any classes "
"implemented ``__str__`` method. All of them will be convert to ``RText``"
msgstr ""

#: ../../source/plugin_dev/api.rst:352
msgid "append"
msgstr ""

#: ../../source/plugin_dev/api.rst:358
msgid ""
"Add several elements to the end of the current ``RTextList``\\ , then "
"return the ``RTextList`` component itself"
msgstr ""

#: ../../source/plugin_dev/api.rst:363
msgid "is_empty"
msgstr ""

#: ../../source/plugin_dev/api.rst:369
msgid ""
"Return a bool indicating if the ``RTextList`` is empty. In other words, "
"has no child element"
msgstr ""

#: ../../source/plugin_dev/api.rst:372
msgid "types"
msgstr ""

#: ../../source/plugin_dev/api.rst:374
msgid ""
"Who doesn't want a complete type checking to help you reduce silly "
"mistakes etc. when coding your plugin? If you want to add type hints to "
"the server interface or command source parameter, here's the package for "
"you to import those Usually-used classes"
msgstr ""

#~ msgid ""
#~ "When your plugin needs to import "
#~ "something from MCDR, rather than "
#~ "directly import the package you want,"
#~ " you can import the packages in "
#~ "mcdreforged.api"
#~ msgstr ""

#~ msgid ""
#~ "mcdreforged.api is the package for "
#~ "plugin developers to import. By only "
#~ "importing from the api package, the "
#~ "import of the target class in the"
#~ " plugin can be decoupled from the "
#~ "actual location of the target class. "
#~ "If MCDR refactors the target class "
#~ "and moves its location in the "
#~ "future, only importing from the api "
#~ "package can keep your plugin unaffected"
#~ msgstr ""

#~ msgid ""
#~ "command package contains the necessities "
#~ "for building a command tree or "
#~ "create your own command, including "
#~ "command tree node classes, command "
#~ "exceptions and some command utils"
#~ msgstr ""

#~ msgid ""
#~ "For example, if you want the class"
#~ " Literal and IllegalArgument for building"
#~ " your command tree on_error exception "
#~ "handling, you can do it like this"
#~ msgstr ""

#~ msgid ""
#~ "decorator package contains some useful "
#~ "function decorators for plugin development"
#~ msgstr ""

#~ msgid ""
#~ "This decorator only changes the return"
#~ " value of the function to the "
#~ "created Thread instance. Beside the "
#~ "return value, it reserves all signatures"
#~ " of the decorated function, so you"
#~ " can safely use the decorated "
#~ "function as if there's no decorating "
#~ "at all"
#~ msgstr ""

#~ msgid ""
#~ "The only difference between do_something1 "
#~ "and do_something2 is that do_something2 "
#~ "is decorated by @new_thread. So when "
#~ "executing do_something2, it won't lag "
#~ "the following execution of MCDR like "
#~ "do_something1 since do_something2 will execute"
#~ " on another thread"
#~ msgstr ""

#~ msgid ""
#~ "If you want to wait for the "
#~ "decorated function to complete, you can"
#~ " simple use the join method from "
#~ "class threading.Thread. Remember the return"
#~ " value of the decorated function has"
#~ " already been changed in to the "
#~ "Thread instance"
#~ msgstr ""

#~ msgid ""
#~ "In addition to simply and directly "
#~ "use a raw @new_thread, it's recommend"
#~ " to add a thread name argument "
#~ "for the decorator"
#~ msgstr ""

#~ msgid ""
#~ "So when you logs something by "
#~ "server.logger, a meaningful thread name "
#~ "will be displayed instead of a "
#~ "plain and meaningless Thread-3"
#~ msgstr ""

#~ msgid ""
#~ "Notes: Some api methods in "
#~ "ServerInterface class are required to be"
#~ " invoked in the MCDR task executor"
#~ " thread. Invoking them in another "
#~ "thread might result in an exception"
#~ msgstr ""

#~ msgid ""
#~ "event package contains the classes for"
#~ " creating custom events, and classes "
#~ "of MCDR built-in events"
#~ msgstr ""

#~ msgid ""
#~ "You might already read the "
#~ "dispatch_event method in ServerInterface "
#~ "class. It only accepts a PluginEvent "
#~ "instance as its first parameter. So "
#~ "if you want to dispatch your "
#~ "custom event, create a LiteralEvent for"
#~ " simpleness or a custom event class"
#~ " inherited from PluginEvent"
#~ msgstr ""

#~ msgid ""
#~ "Package rcon contains a single class "
#~ "RconConnection. It's is a simply rcon"
#~ " client for connect to any Minecraft"
#~ " servers that supports rcon protocol"
#~ msgstr ""

#~ msgid "Parameter address: The address of the rcon server"
#~ msgstr ""

#~ msgid "Parameter port: The port if the rcon server"
#~ msgstr ""

#~ msgid "Parameter password: The password of the rcon connection"
#~ msgstr ""

#~ msgid ""
#~ "Keyword Parameter logger: An instance of"
#~ " logging.Logger. It's used to output "
#~ "some warning information like failing to"
#~ " receive a packet"
#~ msgstr ""

#~ msgid ""
#~ "Start a connection to the rcon "
#~ "server and tries to login. If "
#~ "login success it will return True, "
#~ "otherwise False"
#~ msgstr ""

#~ msgid "Parameter command: The command you want to send to the server"
#~ msgstr ""

#~ msgid ""
#~ "Parameter max_retry_time: The maximum retry"
#~ " time of the operation. This method"
#~ " will return None if max_retry_time "
#~ "retries exceeded"
#~ msgstr ""

#~ msgid "Recommend to read the page Raw JSON text format in Minecraft Wiki first"
#~ msgstr ""

#~ msgid "Inspired by the MCD stext API made by Pandaria98"
#~ msgstr ""

#~ msgid "RColor is an enum class storing all Minecraft color codes"
#~ msgstr ""

#~ msgid "RColor.black"
#~ msgstr ""

#~ msgid "RColor.dark_blue"
#~ msgstr ""

#~ msgid "RColor.dark_green"
#~ msgstr ""

#~ msgid "RColor.dark_aqua"
#~ msgstr ""

#~ msgid "RColor.dark_red"
#~ msgstr ""

#~ msgid "RColor.dark_purple"
#~ msgstr ""

#~ msgid "RColor.gold"
#~ msgstr ""

#~ msgid "RColor.gray"
#~ msgstr ""

#~ msgid "RColor.dark_gray"
#~ msgstr ""

#~ msgid "RColor.blue"
#~ msgstr ""

#~ msgid "RColor.green"
#~ msgstr ""

#~ msgid "RColor.aqua"
#~ msgstr ""

#~ msgid "RColor.red"
#~ msgstr ""

#~ msgid "RColor.light_purple"
#~ msgstr ""

#~ msgid "RColor.yellow"
#~ msgstr ""

#~ msgid "RColor.white"
#~ msgstr ""

#~ msgid "RColor.reset"
#~ msgstr ""

#~ msgid "RStyle is an enum class storing all Minecraft text styles"
#~ msgstr ""

#~ msgid "RStyle.bold"
#~ msgstr ""

#~ msgid "RStyle.italic"
#~ msgstr ""

#~ msgid "RStyle.underlined"
#~ msgstr ""

#~ msgid "RStyle.strike_through"
#~ msgstr ""

#~ msgid "RStyle.obfuscated"
#~ msgstr ""

#~ msgid "RAction is a enum class storing all click event actions"
#~ msgstr ""

#~ msgid "RAction.suggest_command"
#~ msgstr ""

#~ msgid "RAction.run_command"
#~ msgstr ""

#~ msgid "RAction.open_url"
#~ msgstr ""

#~ msgid "RAction.open_file"
#~ msgstr ""

#~ msgid "RAction.copy_to_clipboard"
#~ msgstr ""

#~ msgid ""
#~ "RTextBase is an abstract class of "
#~ "text component. It's the base class "
#~ "of RText and RTextList"
#~ msgstr ""

#~ msgid ""
#~ "Return a json formatted str representing"
#~ " it's data. It can be used as"
#~ " the second parameter in command "
#~ "/tellraw <target> <message> and more"
#~ msgstr ""

#~ msgid ""
#~ "Set the click event with given "
#~ "action and value and return the "
#~ "text component itself"
#~ msgstr ""

#~ msgid "Parameter action: The type of the action"
#~ msgstr ""

#~ msgid "Parameter value: The string value of the action"
#~ msgstr ""

#~ msgid "Method c is the short form of method set_click_event"
#~ msgstr ""

#~ msgid ""
#~ "Set the hover text with given "
#~ "*args and return the text component "
#~ "itself"
#~ msgstr ""

#~ msgid ""
#~ "Parameter action: The elements be used"
#~ " to create a RTextList instance. The"
#~ " RTextList instance is used as the"
#~ " actual hover text"
#~ msgstr ""

#~ msgid "Method h is the short form of method set_hover_text"
#~ msgstr ""

#~ msgid ""
#~ "Create an RText object with specific "
#~ "text, color and style. styles can "
#~ "be a RStyle or a collection of "
#~ "RStyle"
#~ msgstr ""

#~ msgid "The translation text component class. It's almost the same as RText"
#~ msgstr ""

#~ msgid ""
#~ "Create a RTextTranslation object with "
#~ "specific translation_key. The rest of "
#~ "the parameters are the same to "
#~ "RText"
#~ msgstr ""

#~ msgid ""
#~ "Example: RTextTranslation('advancements.nether.root.title', "
#~ "color=RColor.red)"
#~ msgstr ""

#~ msgid "Use the given *args to create a RTextList"
#~ msgstr ""

#~ msgid ""
#~ "Objects in *args can be a str, "
#~ "a RTextBase or any classes implemented"
#~ " __str__ method. All of them will "
#~ "be convert to RText"
#~ msgstr ""

#~ msgid ""
#~ "Add several elements to the end of"
#~ " the current RTextList, then return "
#~ "the RTextList component itself"
#~ msgstr ""

#~ msgid ""
#~ "Return a bool indicating if the "
#~ "RTextList is empty. In other words, "
#~ "has no child element"
#~ msgstr ""

