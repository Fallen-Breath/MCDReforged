# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Fallen_Breath
# This file is distributed under the same license as the MCDReforged
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MCDReforged \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-15 15:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../plugin_dev/api.md:1
msgid "API Packages for Plugins"
msgstr ""

#: ../plugin_dev/api.md:3
msgid ""
"When your plugin needs to import something from MCDR, rather than "
"directly import the package you want, you can import the packages in "
"mcdreforged.api"
msgstr ""

#: ../plugin_dev/api.md:5
msgid ""
"mcdreforged.api is the package for plugin developers to import. By only "
"importing from the api package, the import of the target class in the "
"plugin can be decoupled from the actual location of the target class. If "
"MCDR refactors the target class and moves its location in the future, "
"only importing from the api package can keep your plugin unaffected"
msgstr ""

#: ../plugin_dev/api.md:7
msgid "all"
msgstr ""

#: ../plugin_dev/api.md:13
msgid ""
"This is the simplest way to import everything you want for plugin "
"development. It's a life saver for lazy man"
msgstr ""

#: ../plugin_dev/api.md:15
msgid "Continue reading to see what it will actually import"
msgstr ""

#: ../plugin_dev/api.md:17
msgid "command"
msgstr ""

#: ../plugin_dev/api.md:19
msgid ""
"command package contains the necessities for building a command tree or "
"create your own command, including command tree node classes, command "
"exceptions and some command utils"
msgstr ""

#: ../plugin_dev/api.md:21
msgid ""
"For example, if you want the class Literal and IllegalArgument for "
"building your command tree on_error exception handling, you can do it "
"like this"
msgstr ""

#: ../plugin_dev/api.md:27
msgid "Of course if you are lazy enough you can just"
msgstr ""

#: ../plugin_dev/api.md:33
msgid "decorator"
msgstr ""

#: ../plugin_dev/api.md:35
msgid ""
"decorator package contains some useful function decorators for plugin "
"development"
msgstr ""

#: ../plugin_dev/api.md:37
msgid "new_thread"
msgstr ""

#: ../plugin_dev/api.md:39
msgid ""
"This is a one line solution to make your function executes "
"asynchronously. When decorated with this decorator, functions will be "
"executed in a new daemon thread"
msgstr ""

#: ../plugin_dev/api.md:41
msgid ""
"This decorator only changes the return value of the function to the "
"created Thread instance. Beside the return value, it reserves all "
"signatures of the decorated function, so you can safely use the decorated"
" function as if there's no decorating at all"
msgstr ""

#: ../plugin_dev/api.md:43
msgid "It's also a simple compatible upgrade method for old MCDR 0.x plugins"
msgstr ""

#: ../plugin_dev/api.md:45
msgid "Example:"
msgstr ""

#: ../plugin_dev/api.md:66
msgid ""
"The only difference between do_something1 and do_something2 is that "
"do_something2 is decorated by @new_thread. So when executing "
"do_something2, it won't lag the following execution of MCDR like "
"do_something1 since do_something2 will execute on another thread"
msgstr ""

#: ../plugin_dev/api.md:68
msgid ""
"If you want to wait for the decorated function to complete, you can "
"simple use the join method from class threading.Thread. Remember the "
"return value of the decorated function has already been changed in to the"
" Thread instance"
msgstr ""

#: ../plugin_dev/api.md:74
msgid ""
"In addition to simply and directly use a raw @new_thread, it's recommend "
"to add a thread name argument for the decorator"
msgstr ""

#: ../plugin_dev/api.md:83
msgid ""
"So when you logs something by server.logger, a meaningful thread name "
"will be displayed instead of a plain and meaningless Thread-3"
msgstr ""

#: ../plugin_dev/api.md:85
msgid ""
"Notes: Some api methods in ServerInterface class are required to be "
"invoked in the MCDR task executor thread. Invoking them in another thread"
" might result in an exception"
msgstr ""

#: ../plugin_dev/api.md:87
msgid "event"
msgstr ""

#: ../plugin_dev/api.md:89
msgid ""
"event package contains the classes for creating custom events, and "
"classes of MCDR built-in events"
msgstr ""

#: ../plugin_dev/api.md:91
msgid ""
"You might already read the dispatch_event method in ServerInterface "
"class. It only accepts a PluginEvent instance as its first parameter. So "
"if you want to dispatch your custom event, create a LiteralEvent for "
"simpleness or a custom event class inherited from PluginEvent"
msgstr ""

#: ../plugin_dev/api.md:93
msgid "rcon"
msgstr ""

#: ../plugin_dev/api.md:95
msgid ""
"Package rcon contains a single class RconConnection. It's is a simply "
"rcon client for connect to any Minecraft servers that supports rcon "
"protocol"
msgstr ""

#: ../plugin_dev/api.md:97 ../plugin_dev/api.md:99
msgid "RconConnection"
msgstr ""

#: ../plugin_dev/api.md:105
msgid "Create a rcon client instance"
msgstr ""

#: ../plugin_dev/api.md:107
msgid "Parameter address: The address of the rcon server"
msgstr ""

#: ../plugin_dev/api.md:109
msgid "Parameter port: The port if the rcon server"
msgstr ""

#: ../plugin_dev/api.md:111
msgid "Parameter password: The password of the rcon connection"
msgstr ""

#: ../plugin_dev/api.md:113
msgid ""
"Keyword Parameter logger: An instance of logging.Logger. It's used to "
"output some warning information like failing to receive a packet"
msgstr ""

#: ../plugin_dev/api.md:115
msgid "connect"
msgstr ""

#: ../plugin_dev/api.md:121
msgid ""
"Start a connection to the rcon server and tries to login. If login "
"success it will return True, otherwise False"
msgstr ""

#: ../plugin_dev/api.md:123
msgid "disconnect"
msgstr ""

#: ../plugin_dev/api.md:129
msgid "Disconnect from the server"
msgstr ""

#: ../plugin_dev/api.md:131
msgid "send_command"
msgstr ""

#: ../plugin_dev/api.md:137
msgid ""
"Send  command to the rcon server, and return the command execution result"
" form the server"
msgstr ""

#: ../plugin_dev/api.md:139
msgid "Parameter command: The command you want to send to the server"
msgstr ""

#: ../plugin_dev/api.md:141
msgid ""
"Parameter max_retry_time: The maximum retry time of the operation. This "
"method will return None if max_retry_time retries exceeded"
msgstr ""

#: ../plugin_dev/api.md:143
msgid "rtext"
msgstr ""

#: ../plugin_dev/api.md:145
msgid "Recommend to read the page Raw JSON text format in Minecraft Wiki first"
msgstr ""

#: ../plugin_dev/api.md:147
msgid "This is an advance text component library for Minecraft"
msgstr ""

#: ../plugin_dev/api.md:149
msgid "Inspired by the MCD stext API made by Pandaria98"
msgstr ""

#: ../plugin_dev/api.md:151
msgid "RColor"
msgstr ""

#: ../plugin_dev/api.md:153
msgid "RColor is an enum class storing all Minecraft color codes"
msgstr ""

#: ../plugin_dev/api.md:155
msgid "RColor.black"
msgstr ""

#: ../plugin_dev/api.md:156
msgid "RColor.dark_blue"
msgstr ""

#: ../plugin_dev/api.md:157
msgid "RColor.dark_green"
msgstr ""

#: ../plugin_dev/api.md:158
msgid "RColor.dark_aqua"
msgstr ""

#: ../plugin_dev/api.md:159
msgid "RColor.dark_red"
msgstr ""

#: ../plugin_dev/api.md:160
msgid "RColor.dark_purple"
msgstr ""

#: ../plugin_dev/api.md:161
msgid "RColor.gold"
msgstr ""

#: ../plugin_dev/api.md:162
msgid "RColor.gray"
msgstr ""

#: ../plugin_dev/api.md:163
msgid "RColor.dark_gray"
msgstr ""

#: ../plugin_dev/api.md:164
msgid "RColor.blue"
msgstr ""

#: ../plugin_dev/api.md:165
msgid "RColor.green"
msgstr ""

#: ../plugin_dev/api.md:166
msgid "RColor.aqua"
msgstr ""

#: ../plugin_dev/api.md:167
msgid "RColor.red"
msgstr ""

#: ../plugin_dev/api.md:168
msgid "RColor.light_purple"
msgstr ""

#: ../plugin_dev/api.md:169
msgid "RColor.yellow"
msgstr ""

#: ../plugin_dev/api.md:170
msgid "RColor.white"
msgstr ""

#: ../plugin_dev/api.md:171
msgid "RColor.reset"
msgstr ""

#: ../plugin_dev/api.md:173
msgid "RStyle"
msgstr ""

#: ../plugin_dev/api.md:175
msgid "RStyle is an enum class storing all Minecraft text styles"
msgstr ""

#: ../plugin_dev/api.md:177
msgid "RStyle.bold"
msgstr ""

#: ../plugin_dev/api.md:178
msgid "RStyle.italic"
msgstr ""

#: ../plugin_dev/api.md:179
msgid "RStyle.underlined"
msgstr ""

#: ../plugin_dev/api.md:180
msgid "RStyle.strike_through"
msgstr ""

#: ../plugin_dev/api.md:181
msgid "RStyle.obfuscated"
msgstr ""

#: ../plugin_dev/api.md:183
msgid "RAction"
msgstr ""

#: ../plugin_dev/api.md:185
msgid "RAction is a enum class storing all click event actions"
msgstr ""

#: ../plugin_dev/api.md:187
msgid "RAction.suggest_command"
msgstr ""

#: ../plugin_dev/api.md:188
msgid "RAction.run_command"
msgstr ""

#: ../plugin_dev/api.md:189
msgid "RAction.open_url"
msgstr ""

#: ../plugin_dev/api.md:190
msgid "RAction.open_file"
msgstr ""

#: ../plugin_dev/api.md:191
msgid "RAction.copy_to_clipboard"
msgstr ""

#: ../plugin_dev/api.md:193
msgid "RTextBase"
msgstr ""

#: ../plugin_dev/api.md:195
msgid ""
"RTextBase is an abstract class of text component. It's the base class of "
"RText and RTextList"
msgstr ""

#: ../plugin_dev/api.md:197
msgid "to_json_object"
msgstr ""

#: ../plugin_dev/api.md:203 ../plugin_dev/api.md:221 ../plugin_dev/api.md:231
#: ../plugin_dev/api.md:241 ../plugin_dev/api.md:251
msgid "Abstract method"
msgstr ""

#: ../plugin_dev/api.md:205
msgid ""
"Return an object representing it's data that can be serialized into json "
"string"
msgstr ""

#: ../plugin_dev/api.md:207
msgid "to_json_str"
msgstr ""

#: ../plugin_dev/api.md:213
msgid ""
"Return a json formatted str representing it's data. It can be used as the"
" second parameter in command /tellraw <target> <message> and more"
msgstr ""

#: ../plugin_dev/api.md:215
msgid "to_plain_text"
msgstr ""

#: ../plugin_dev/api.md:223
msgid ""
"Return a plain text for console display. Click event and hover event will"
" be ignored"
msgstr ""

#: ../plugin_dev/api.md:225
msgid "copy"
msgstr ""

#: ../plugin_dev/api.md:233
msgid "Return a copy version of itself"
msgstr ""

#: ../plugin_dev/api.md:235
msgid "set_color"
msgstr ""

#: ../plugin_dev/api.md:243
msgid "Set the color of the text and return the text component itself"
msgstr ""

#: ../plugin_dev/api.md:245
msgid "set_styles"
msgstr ""

#: ../plugin_dev/api.md:253
msgid "Set the styles of the text and return the text component itself"
msgstr ""

#: ../plugin_dev/api.md:255
msgid "set_click_event"
msgstr ""

#: ../plugin_dev/api.md:261
msgid ""
"Set the click event with given action and value and return the text "
"component itself"
msgstr ""

#: ../plugin_dev/api.md:263
msgid "Parameter action: The type of the action"
msgstr ""

#: ../plugin_dev/api.md:265
msgid "Parameter value: The string value of the action"
msgstr ""

#: ../plugin_dev/api.md:267
msgid "Method c is the short form of method set_click_event"
msgstr ""

#: ../plugin_dev/api.md:269
msgid "set_hover_text"
msgstr ""

#: ../plugin_dev/api.md:275
msgid "Set the hover text with given *args and return the text component itself"
msgstr ""

#: ../plugin_dev/api.md:277
msgid ""
"Parameter action: The elements be used to create a RTextList instance. "
"The RTextList instance is used as the actual hover text"
msgstr ""

#: ../plugin_dev/api.md:279
msgid "Method h is the short form of method set_hover_text"
msgstr ""

#: ../plugin_dev/api.md:281 ../plugin_dev/api.md:285
msgid "RText"
msgstr ""

#: ../plugin_dev/api.md:283
msgid "The regular text component class"
msgstr ""

#: ../plugin_dev/api.md:291
msgid ""
"Create an RText object with specific text, color and style. styles can be"
" a RStyle or a collection of RStyle"
msgstr ""

#: ../plugin_dev/api.md:293 ../plugin_dev/api.md:297
msgid "RTextTranslation"
msgstr ""

#: ../plugin_dev/api.md:295
msgid "The translation text component class. It's almost the same as RText"
msgstr ""

#: ../plugin_dev/api.md:303
msgid ""
"Create a RTextTranslation object with specific translation_key. The rest "
"of the parameters are the same to RText"
msgstr ""

#: ../plugin_dev/api.md:305
msgid ""
"Example: RTextTranslation('advancements.nether.root.title', "
"color=RColor.red)"
msgstr ""

#: ../plugin_dev/api.md:307 ../plugin_dev/api.md:311
msgid "RTextList"
msgstr ""

#: ../plugin_dev/api.md:309
msgid "A list of RTextBase objects"
msgstr ""

#: ../plugin_dev/api.md:317
msgid "Use the given *args to create a RTextList"
msgstr ""

#: ../plugin_dev/api.md:319 ../plugin_dev/api.md:329
msgid ""
"Objects in *args can be a str, a RTextBase or any classes implemented "
"__str__ method. All of them will be convert to RText"
msgstr ""

#: ../plugin_dev/api.md:321
msgid "append"
msgstr ""

#: ../plugin_dev/api.md:327
msgid ""
"Add several elements to the end of the current RTextList, then return the"
" RTextList component itself"
msgstr ""

#: ../plugin_dev/api.md:331
msgid "is_empty"
msgstr ""

#: ../plugin_dev/api.md:337
msgid ""
"Return a bool indicating if the RTextList is empty. In other words, has "
"no child element"
msgstr ""

#: ../plugin_dev/api.md:339
msgid "types"
msgstr ""

#: ../plugin_dev/api.md:341
msgid ""
"Who doesn't want a complete type checking to help you reduce silly "
"mistakes etc. when coding your plugin? If you want to add type hints to "
"the server interface or command source parameter, here's the package for "
"you to import those Usually-used classes"
msgstr ""

