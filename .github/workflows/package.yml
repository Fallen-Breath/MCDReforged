name: CI for MCDR

on:
  push:
    paths:
      - ".github/**"
      - "mcdreforged/**"
      - "tests/**"
      - "*.py"

env:
  IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/v') }}

jobs:
  test:
    uses: ./.github/workflows/test.yml

  assemble:
    needs: test
    uses: ./.github/workflows/assemble.yml

  pypi_upload:
    runs-on: ubuntu-latest
    name: Publish package to (Test)PyPI
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v3
    - name: Setup python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install -U pip
        pip install setuptools wheel

    - name: Create distribution
      id: distribution
      run: |
        python setup.py sdist bdist_wheel

    - name: Publish distribution to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

    - name: Publish distribution to PyPI
      if: env.IS_RELEASE == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - uses: actions/upload-artifact@v3
      with:
        name: MCDReforged package distribution for ${{ github.sha }}
        path: dist/

    outputs:
      version: ${{ steps.distribution.outputs.version }}

  image:
    name: Build and publish docker images
    runs-on: ubuntu-latest
    needs: pypi_upload
    strategy:
      matrix:
        slim: ['false', 'true']

    steps:
    - uses: actions/checkout@v3

    - name: Prepare build config
      id: config
      run: |
        if [ -z "${{ needs.pypi_upload.outputs.version }}" ]; then
          exit 1
        fi
        if [ "${{ matrix.slim }}" = "true" ]; then 
          echo "base_image_tag=3.11-slim-bookworm" >> "$GITHUB_OUTPUT"
          echo "tag_suffix=-slim" >> "$GITHUB_OUTPUT"
        else
          echo "base_image_tag=3.11-bookworm" >> "$GITHUB_OUTPUT"
          echo "tag_suffix=" >> "$GITHUB_OUTPUT"
        fi
        if [ "${{ env.IS_RELEASE }}" = "true" ]; then
          echo "pypi_index=https://pypi.org/simple" >> "$GITHUB_OUTPUT"
        else
          echo "pypi_index=https://test.pypi.org/simple" >> "$GITHUB_OUTPUT"
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: fallenbreath
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: mcdreforged/mcdreforged
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        flavor:
          suffix=${{ steps.config.outputs.tag_suffix }},onlatest=true

    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        platforms: linux/amd64,linux/arm64
        file: docker/Dockerfile
        context: docker
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          MCDR_REQUIREMENT=${{ needs.pypi_upload.outputs.version }}
          PYPI_INDEX=${{ steps.config.outputs.pypi_index }}
